---
- hosts: hammerdb, primary
  name: Run HammerDB - long run - refdata enabled
  gather_facts: false
  become: true

  collections:
    - edb_devops.edb_postgres

  tasks:
    - name: Install sysstat
      ansible.builtin.package:
        name: sysstat
        state: present
      become: true
      when: "'primary' in group_names"

    - name: Set variables when using refdata
      ansible.builtin.set_fact:
        _sar_cpu_filename: "sar_cpu_refdata.txt"
        _sar_mem_filename: "sar_mem_refdata.txt"
        _sar_disk_filename: "sar_disk_refdata.txt"
        _hdb_output_filename: "hammerdb_refdata_{{ tpcc_duration }}_{{ tpcc_vusers }}.out"
        _hammerdb_script: "runner.refdata.tcl"
        _hammerdb_template: "runner.refdata.tcl.j2"

    - name: Set tpcc_runtimer
      ansible.builtin.set_fact:
        tpcc_runtimer: "{{ tpcc_rampup | int * 60 + tpcc_duration | int * 60 }}"

    - name: Generate HammerDB runner script
      ansible.builtin.template:
        src: "{{ _hammerdb_template }}"
        dest: "{{ hammerdb_data_path }}/{{ _hammerdb_script }}"
      when: "'hammerdb' in group_names"

    - name: "Stop the database"
      ansible.builtin.command: >
        {{ pg_bin_path }}/pg_ctl -D {{ pg_data }} -l {{ pg_data }}/postgresql.log stop
      become_user: "{{ pg_owner }}"
      when: "'primary' in group_names"

    - name: "Clear system cache"
      ansible.builtin.shell: >
        echo 3 > /proc/sys/vm/drop_caches
      become: true
      when: "'primary' in group_names"

    - name: "Start the database"
      ansible.builtin.command: >
        {{ pg_bin_path }}/pg_ctl -D {{ pg_data }} -l {{ pg_data }}/postgresql.log start
      become_user: "{{ pg_owner }}"
      when: "'primary' in group_names"

    - name: Wait for Postgres to be ready
      ansible.builtin.command:
        cmd: >
          {{ pg_bin_path }}/pg_isready -d postgres
      become_user: "{{ pg_owner }}"
      register: pg_isready
      until: "pg_isready is not failed"
      retries: 10
      delay: 10
      when: "'primary' in group_names"

    - name: Start system metrics collections
      ansible.builtin.shell: |
        nohup sar 30 $(({{ tpcc_runtimer }} / 30)) > /tmp/{{ _sar_cpu_filename }} 2>&1&
        nohup sar -r 30 $(({{ tpcc_runtimer }} / 30)) > /tmp/{{ _sar_mem_filename }} 2>&1&
        nohup sar -p -d 30 $(({{ tpcc_runtimer }} / 30)) > /tmp/{{ _sar_disk_filename }} 2>&1&
      become: true
      when: "'primary' in group_names"

    - name: Execute the long HammerDB run
      ansible.builtin.shell: |
        ./hammerdbcli tcl auto {{ hammerdb_data_path }}/{{ _hammerdb_script }} > {{ hammerdb_data_path }}/{{ _hdb_output_filename }}
      args:
        chdir: "{{ hammerdb_install_path }}"
      # Commented out because was causing benchmark to fail - 05/08/2023
      #async: 180000
      #poll: 60
      when: "'hammerdb' in group_names"

    - name: Fetch data files from Postgres server
      ansible.builtin.fetch:
        src: "/tmp/{{ item }}"
        dest: "./benchmark_data/{{ item }}"
        flat: true
      when: "'primary' in group_names"
      register: fetch_postgres_data
      retries: 20
      delay: 10
      until: fetch_postgres_data is not failed
      become: true
      loop:
      - "{{ _sar_cpu_filename }}"
      - "{{ _sar_mem_filename }}"
      - "{{ _sar_disk_filename }}"

    - name: Fetch data files from HammerDB machine
      ansible.builtin.fetch:
        src: "{{ hammerdb_data_path }}/{{ item }}"
        dest: "./benchmark_data/{{ item }}"
        flat: true
      when: "'hammerdb' in group_names"
      become: true
      loop:
      - "{{ _hdb_output_filename }}"

- hosts: hammerdb, primary
  name: Run HammerDB - long run - refdata disabled
  gather_facts: false
  become: true

  collections:
    - edb_devops.edb_postgres

  tasks:
    - name: Install sysstat
      ansible.builtin.package:
        name: sysstat
        state: present
      become: true
      when: "'primary' in group_names"

    - name: Set variables when not using refdata
      ansible.builtin.set_fact:
        _sar_cpu_filename: "sar_cpu.txt"
        _sar_mem_filename: "sar_mem.txt"
        _sar_disk_filename: "sar_disk.txt"
        _hdb_output_filename: "hammerdb_{{ tpcc_duration }}_{{ tpcc_vusers }}.out"
        _hammerdb_script: "runner.tcl"
        _hammerdb_template: "runner.tcl.j2"

    - name: Set tpcc_runtimer
      ansible.builtin.set_fact:
        tpcc_runtimer: "{{ tpcc_rampup | int * 60 + tpcc_duration | int * 60 }}"

    - name: Generate HammerDB runner script
      ansible.builtin.template:
        src: "{{ _hammerdb_template }}"
        dest: "{{ hammerdb_data_path }}/{{ _hammerdb_script }}"
      when: "'hammerdb' in group_names"

    - name: "Stop the database"
      ansible.builtin.command: >
        {{ pg_bin_path }}/pg_ctl -D {{ pg_data }} -l {{ pg_data }}/postgresql.log stop
      become_user: "{{ pg_owner }}"
      when: "'primary' in group_names"

    - name: "Clear system cache"
      ansible.builtin.shell: >
        echo 3 > /proc/sys/vm/drop_caches
      become: true
      when: "'primary' in group_names"

    - name: "Start the database"
      ansible.builtin.command: >
        {{ pg_bin_path }}/pg_ctl -D {{ pg_data }} -l {{ pg_data }}/postgresql.log start
      become_user: "{{ pg_owner }}"
      when: "'primary' in group_names"

    - name: Wait for Postgres to be ready
      ansible.builtin.command:
        cmd: >
          {{ pg_bin_path }}/pg_isready -d postgres
      become_user: "{{ pg_owner }}"
      register: pg_isready
      until: "pg_isready is not failed"
      retries: 10
      delay: 10
      when: "'primary' in group_names"

    - name: Start system metrics collections
      ansible.builtin.shell: |
        nohup sar 30 $(({{ tpcc_runtimer }} / 30)) > /tmp/{{ _sar_cpu_filename }} 2>&1&
        nohup sar -r 30 $(({{ tpcc_runtimer }} / 30)) > /tmp/{{ _sar_mem_filename }} 2>&1&
        nohup sar -p -d 30 $(({{ tpcc_runtimer }} / 30)) > /tmp/{{ _sar_disk_filename }} 2>&1&
      become: true
      when: "'primary' in group_names"

    - name: Execute the long HammerDB run
      ansible.builtin.shell: |
        ./hammerdbcli tcl auto {{ hammerdb_data_path }}/{{ _hammerdb_script }} > {{ hammerdb_data_path }}/{{ _hdb_output_filename }}
      args:
        chdir: "{{ hammerdb_install_path }}"
      # Commented out because was causing benchmark to fail - 05/08/2023
      #async: 180000
      #poll: 60
      when: "'hammerdb' in group_names"

    - name: Fetch data files from Postgres server
      ansible.builtin.fetch:
        src: "/tmp/{{ item }}"
        dest: "./benchmark_data/{{ item }}"
        flat: true
      when: "'primary' in group_names"
      register: fetch_postgres_data
      retries: 20
      delay: 10
      until: fetch_postgres_data is not failed
      become: true
      loop:
      - "{{ _sar_cpu_filename }}"
      - "{{ _sar_mem_filename }}"
      - "{{ _sar_disk_filename }}"

    - name: Fetch data files from HammerDB machine
      ansible.builtin.fetch:
        src: "{{ hammerdb_data_path }}/{{ item }}"
        dest: "./benchmark_data/{{ item }}"
        flat: true
      when: "'hammerdb' in group_names"
      become: true
      loop:
      - "{{ _hdb_output_filename }}"

- hosts: localhost
  name: post-processing on localhost
  gather_facts: false
  become: false
  tasks:
    - name: Generate final data points and chart
      ansible.builtin.shell:
        cmd: |
          # Some distros use python for python3 since python2 is EOL
          if command -v python3 > /dev/null
          then
            PLAYBOOK_PYTHON="python3"
          else
            PLAYBOOK_PYTHON="python"
          fi
          $PLAYBOOK_PYTHON {{ playbook_dir }}/post-processing.py

    - name: Copy data to results directory
      ansible.builtin.copy:
        src: "./benchmark_data/"
        dest: "{{ results_directory }}/"

    - name: Discard temporary data directory
      ansible.builtin.file:
        path: "./benchmark_data/"
        state: absent
