---
- hosts: primary
  name: Run pgbench benchmark
  become: true
  gather_facts: false

  tasks:

    - name: Increase system limits
      ansible.builtin.lineinfile:
        path: /etc/security/limits.d/pgbench.conf
        line: "{{ item }}"
        create: true
      become: true
      loop:
      - "* soft nofile 10240"
      - "* hard nofile 10240"

    - name: Check if the benchmark script exists
      ansible.builtin.stat:
        path: /tmp/exec-pgbench-rampup.sh
      register: stat_result

    - name: Copy the benchmark script if does not exist
      ansible.builtin.copy:
        src: ./files/exec-pgbench-rampup.sh
        dest: /tmp/exec-pgbench-rampup.sh
        mode: "0755"
      become_user: "{{ pg_owner }}"
      when: not stat_result.stat.exists

    - name: Start only one PostgreSQL instance
      ansible.builtin.command:
        cmd: >
          /usr/local/pgsql-{{ pg_version }}/bin/pg_ctl -D /pgdata/data/{{ pg_version }} -l /tmp/postgres.log start
      become_user: "{{ pg_owner }}"

    - name: Wait for Postgres to be ready
      ansible.builtin.command:
        cmd: >
          /usr/local/pgsql-{{ pg_version }}/bin/pg_isready
      become_user: "{{ pg_owner }}"
      register: pg_isready
      until: "pg_isready is not failed"
      retries: 10
      delay: 10

    - name: Drop the pgbench database if exists
      ansible.builtin.command:
        cmd: >
         /usr/local/pgsql-{{ pg_version }}/bin/dropdb --if-exists pgbench
      become_user: "{{ pg_owner }}"

    - name: Create the pgbench database
      ansible.builtin.command:
        cmd: >
         /usr/local/pgsql-{{ pg_version }}/bin/createdb pgbench
      become_user: "{{ pg_owner }}"

    - name: Restore pgbench database
      ansible.builtin.command:
        cmd: >
          /usr/local/pgsql-{{ pg_version }}/bin/pg_restore --if-exists --clean -j 4 {{ pg_data }}/backup -d pgbench
      become_user: "{{ pg_owner }}"
      async: 180000
      poll: 60

    - name: Vacuuming pgbench database
      ansible.builtin.command:
        cmd: >
          /usr/local/pgsql-{{ pg_version }}/bin/vacuumdb -d pgbench -F -j 4 -z
      become_user: "{{ pg_owner }}"     
      async: 120000
      poll: 60

    # Run the benchmark script
    - name: Execute the benchmark
      ansible.builtin.command:
        cmd: >
          /tmp/exec-pgbench-rampup.sh {{ pgbench_mode }} {{ client_end_duration }} {{ benchmark_duration }}
      become_user: "{{ pg_owner }}"
      environment:
        PG_VERSION: "{{ pg_version }}"
        PG_MAX_VERSION: "{{ pg_max_version }}"
        CLIENT_END_DURATION: "{{ client_end_duration }}"
        BENCHMARK_DURATION: "{{ benchmark_duration }}"

    - name: Killing Postgres
      ansible.builtin.shell: kill -9 $(pidof postgres)
      become: true

    - name: Cleaning up PGDATA and PGWAL
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      become: true
      loop:
        - "/pgdata/data/{{ pg_version }}"
        - "/pgwal/wal/{{ pg_version }}"

    - name: Fetch pgbench data files
      ansible.builtin.fetch:
        src: "/tmp/pgbench-tps-{{ pg_version }}.csv"
        dest: "./pgbench_data/pgbench-tps-{{ pg_version }}.csv"
        flat: true

- hosts: localhost
  name: post-processing on localhost
  gather_facts: false
  become: false
  tasks:
    - name: Generate final data points and chart
      ansible.builtin.shell:
        cmd: |
          # Some distros use python for python3 since python2 is EOL
          if command -v python3 > /dev/null
          then
            PLAYBOOK_PYTHON="python3"
          else
            PLAYBOOK_PYTHON="python"
          fi
          $PLAYBOOK_PYTHON {{ playbook_dir }}/post-processing.py

    - name: Copy data to results directory
      ansible.builtin.copy:
        src: "./pgbench_data/"
        dest: "{{ results_directory }}/"

    - name: Discard temporary data directory
      ansible.builtin.file:
        path: "./pgbench_data/"
        state: absent
